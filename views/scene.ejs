<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Atmos backend</title>
    <style>
        @font-face {
            font-family: 'cera';
            src: url('/assets/fonts/cera-pro-400.eot');
            src: url('/assets/fonts/cera-pro-400.eot') format('embedded-opentype'),
            url('/assets/fonts/cera-pro-400.woff2') format('woff2'),
            url('/assets/fonts/cera-pro-400.woff') format('woff'),
            url('/assets/fonts/cera-pro-400.ttf') format('truetype');
            font-weight: 400;
        }
        @font-face {
            font-family: 'cera';
            src: url('/assets/fonts/cera-pro-500.eot');
            src: url('/assets/fonts/cera-pro-500.eot') format('embedded-opentype'),
            url('/assets/fonts/cera-pro-500.woff2') format('woff2'),
            url('/assets/fonts/cera-pro-500.woff') format('woff'),
            url('/assets/fonts/cera-pro-500.ttf') format('truetype');
            font-weight: 500;
        }
        @font-face {
            font-family: 'cera';
            src: url('/assets/fonts/cera-pro-700.eot');
            src: url('/assets/fonts/cera-pro-700.eot') format('embedded-opentype'),
            url('/assets/fonts/cera-pro-700.woff2') format('woff2'),
            url('/assets/fonts/cera-pro-700.woff') format('woff'),
            url('/assets/fonts/cera-pro-700.ttf') format('truetype');
            font-weight: 700;
        }
        body {
            margin: 0;
            background: linear-gradient(to bottom, #074D2F, #001606);
            color: #fff;
            font-size: 13px;
            line-height: 24px;
            overscroll-behavior: none;
            font-family: 'cera';
        }
        .logo {
            position: absolute;
            top: 24px;
            left: 36px;
            width: 200px;
        }
        .logo img {
            width: 100%;
        }
    </style>
</head>
<body>
<div class="logo">
    <img src="/assets/logo.png">
</div>
<script type="application/javascript">
    window.sceneData = JSON.parse(`<%- JSON.stringify(sceneData) %>`)
</script>
<script type="importmap">
			{
				"imports": {
					"three": "/js/three.js"
				}
			}
		</script>

<script type="module">

    import { AmbientLight, PerspectiveCamera, PointLight, Scene, sRGBEncoding, WebGLRenderer } from 'three';
    import { FBXLoader } from '/js/FBXLoader.js'

    const colorTable = {
        red: '#b20000',
        yellow: '#e0bb00',
        green: '#339b07',
        black: '#0e1806',
    }

    let camera, scene, renderer, controls;

    init();
    function init() {
        console.log(sceneData)

        camera = new PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
        camera.position.z = 10;
        camera.position.x = 12;
        camera.position.y = 0;
        camera.lookAt(0, -15, 0)
        controls

        scene = new Scene()

        const ambientLight = new AmbientLight('#ffffff', 0.2)
        scene.add(ambientLight)

        const pointLight = new PointLight('#ffffff', 0.7)
        pointLight.position.x = 15
        pointLight.position.y = 10
        pointLight.position.z = 10
        scene.add(pointLight)

        //scene = new ObjectLoader().parse( JSON.parse(window.sceneData) );
        const loader = new FBXLoader()
        loader.load('/assets/cart.fbx', (cart) => {
            cart.scale.setScalar(0.06)
            cart.position.y = -15
            scene.add(cart)
        })
        loader.load('/assets/tomato.fbx', (tomatoModel) => {
            tomatoModel.scale.setScalar(0.25)
            const mat = tomatoModel.getObjectByName('Sphere').material
            const {color, long, size} = sceneData.tomatoParams
            mat.color.set(colorTable[color])
            const body = tomatoModel.getObjectByName('body')

            body.scale.y = long * size
            body.scale.x = size
            body.scale.z = size

            for (const d of sceneData.tomatoes) {
                const tomato = tomatoModel.clone()
                tomato.quaternion.set(
                    d.quaternion._x,
                    d.quaternion._y,
                    d.quaternion._z,
                    d.quaternion._w,
                )
                tomato.position.set(
                    d.position.x,
                    d.position.y,
                    d.position.z,
                )
                scene.add(tomato)
                console.log(tomato)
            }
            setTimeout(render, 50)
        })

        renderer = new WebGLRenderer( { antialias: true, alpha: true } );
        renderer.outputEncoding = sRGBEncoding

        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        document.body.appendChild( renderer.domElement );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function render() {

        // requestAnimationFrame( animate );

        renderer.render( scene, camera );
        window.onSceneRender?.()

    }

</script>

</body>
</html>
